pipeline {
    agent any

    environment {
        // Identifiants Jenkins pour Docker Hub
        DOCKERHUB_CREDENTIALS = credentials('espoir10')
        
        // Tag d'image basé sur le numéro de build Jenkins
        IMAGE_TAG = "v${BUILD_NUMBER}"
    }

    stages {

        // Étape 1 : Clonage du dépôt Git
        stage('Cloner le dépôt') {
            steps {
                git branch: 'main', url: 'https://github.com/RokiaSmk/application-vote'
            }
        }

        // Étape 2 : Build des images Docker pour chaque service
        stage('Build Images') {
            steps {
                script {
                    def services = ['vote', 'worker', 'result']
                    for (service in services) {
                        sh """
                        cd voting-app/${service}
                        docker build . -t rosiasmk/${service}:${IMAGE_TAG} -t rosiasmk/${service}:latest
                        cd ../..
                        """
                    }
                }
            }
        }

        // Étape 3 : Connexion à Docker Hub
        stage('Login to Docker Hub') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        // Étape 4 : Push des images Docker sur Docker Hub
        stage('Push Images') {
            steps {
                script {
                    def services = ['vote', 'worker', 'result']
                    for (service in services) {
                        sh """
                        docker push rosiasmk/${service}:${IMAGE_TAG}
                        docker push rosiasmk/${service}:latest
                        """
                    }
                }
            }
        }

        // Étape 5 : Déploiement avec docker-compose
        stage('Deploy') {
            steps {
                sh """
                docker-compose down || true
                docker-compose pull
                docker-compose up -d
                """
            }
        }
    }

    // Post-actions : exécutées quelle que soit l’issue du pipeline
    post {
        success {
            echo 'Pipeline exécutée avec succès !'
        }
        failure {
            echo 'La pipeline a échoué.'
        }
        always {
            echo 'Nettoyage de l’espace de travail...'
            cleanWs()
        }
    }
}