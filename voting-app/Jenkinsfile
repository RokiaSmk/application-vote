pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('rosiasmk')  // ID des credentials dans Jenkins
        IMAGE_TAG = "v${BUILD_NUMBER}"                   // Tag dynamique basé sur le numéro de build
    }
    stages {
        stage('Cloner le dépôt') {
            steps {
                git branch: 'main', url: 'https://github.com/RokiaSmk/application-vote'
            }
        }
        
        stage('Build Images') {
            steps {
                script {
                    def services = ['vote', 'worker', 'result']  // Liste des services à construire
                    for (service in services) {
                        sh """
                        cd voting-app/${service}
                        docker build . -t rosiasmk/${service}:${IMAGE_TAG} -t rosiasmk/${service}:latest
                        cd ../..
                        """
                    }
                }
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('Push Images') {
            steps {
                script {
                    def services = ['vote', 'worker', 'result']
                    for (service in services) {
                        sh """
                        docker push rosiasmk/${service}:${IMAGE_TAG}
                        docker push rosiasmk/${service}:latest
                        """
                    }
                }
            }
        }

        stage('Déployer') {
            steps {
                sshagent(['ssh-credentials-id']) {
                    sh """
                    ssh user@serveur 'cd /chemin/du/projet && docker-compose pull && docker-compose up -d'
                    """
                }
            }
        }
    }
    post {
        success {
            echo 'Déploiement réussi !'
            // Exemple : notifier par mail
            mail to: 'ton.email@example.com',
                 subject: "Build ${env.BUILD_NUMBER} réussi",
                 body: "Le build Jenkins numéro ${env.BUILD_NUMBER} a été déployé avec succès."
        }
        failure {
            echo 'Le déploiement a échoué.'
            // Exemple : notifier par mail
            mail to: 'ton.email@example.com',
                 subject: "Build ${env.BUILD_NUMBER} échoué",
                 body: "Le build Jenkins numéro ${env.BUILD_NUMBER} a échoué. Veuillez vérifier les logs."
        }
        always {
            echo 'Fin du pipeline.'
            // Exemple : nettoyer des fichiers temporaires
            cleanWs()
        }
    }
}
