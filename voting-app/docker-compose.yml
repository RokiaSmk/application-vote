version: '3.8'

services:
  vote:
    container_name: vote
    image: rosiasmk/vote:v1
    ports:
      - "5000:80"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - frontend
      - backend
    restart: always

  result:
    container_name: result
    image: rosiasmk/result:v1
    ports:
      - "5001:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - frontend
      - backend
    restart: always

  worker:
    container_name: worker
    image: rosiasmk/worker:v1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    restart: always

  redis:
    container_name: redis
    image: redis
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - donnees_redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 3
      start_period: 5s
    networks:
      - backend
    restart: always

  db:
    container_name: db
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: voting
    volumes:
      - donnees_postgres:/var/lib/postgresql/data
      - logs_postgres:/var/log/postgresql
      - config_postgres:/etc/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U" ,"postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend
    restart: always

volumes:
  db_data:
  donnees_postgres:
  logs_postgres:
  config_postgres:
  donnees_redis:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge