version: '3.8'

services:
  vote:
    image: rokiasmk/vote:v1
    ports:
      - "5000:80"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - frontend
      - backend
    restart: unless-stopped

  result:
    image: rokiasmk/result:v1
    ports:
      - "5001:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - frontend
      - backend
    restart: unless-stopped

  worker:
    image: rokiasmk/worker:v1
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  redis:
    image: redis:7.0
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
    restart: unless-stopped

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    restart: unless-stopped

volumes:
  db_data:

networks:
  frontend:
  backend:
